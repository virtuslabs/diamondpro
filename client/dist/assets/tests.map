{"version":3,"sources":["client/tests/adapters/application.jshint.js","client/tests/app.jshint.js","client/tests/components/package-component.jshint.js","client/tests/controllers/admin/index.jshint.js","client/tests/controllers/application.jshint.js","client/tests/controllers/packages.jshint.js","client/tests/helpers/destroy-app.js","client/tests/helpers/destroy-app.jshint.js","client/tests/helpers/ember-simple-auth.js","client/tests/helpers/module-for-acceptance.js","client/tests/helpers/module-for-acceptance.jshint.js","client/tests/helpers/resolver.js","client/tests/helpers/resolver.jshint.js","client/tests/helpers/start-app.js","client/tests/helpers/start-app.jshint.js","client/tests/integration/components/package-component-test.js","client/tests/integration/components/package-component-test.jshint.js","client/tests/models/appointment.jshint.js","client/tests/models/client.jshint.js","client/tests/models/package.jshint.js","client/tests/resolver.jshint.js","client/tests/router.jshint.js","client/tests/routes/admin/appointments.jshint.js","client/tests/routes/admin/clients.jshint.js","client/tests/routes/admin/clients/client/edit.jshint.js","client/tests/routes/admin/clients/index.jshint.js","client/tests/routes/admin/clients/new.jshint.js","client/tests/routes/admin/index.jshint.js","client/tests/routes/admin/packages/edit.jshint.js","client/tests/routes/admin/packages/index.jshint.js","client/tests/routes/admin/packages/new.jshint.js","client/tests/routes/admin/packages/package/index.jshint.js","client/tests/routes/application.jshint.js","client/tests/routes/appointments.jshint.js","client/tests/routes/clients.jshint.js","client/tests/routes/clients/client/client.jshint.js","client/tests/routes/clients/client/edit.jshint.js","client/tests/routes/clients/new.jshint.js","client/tests/routes/login.jshint.js","client/tests/routes/packages.jshint.js","client/tests/routes/packages/edit.jshint.js","client/tests/routes/packages/new.jshint.js","client/tests/routes/packages/package/package.jshint.js","client/tests/routes/protected.jshint.js","client/tests/test-helper.js","client/tests/test-helper.jshint.js","client/tests/unit/controllers/packages-test.js","client/tests/unit/controllers/packages-test.jshint.js","client/tests/unit/models/appointment-test.js","client/tests/unit/models/appointment-test.jshint.js","client/tests/unit/models/client-test.js","client/tests/unit/models/client-test.jshint.js","client/tests/unit/models/package-test.js","client/tests/unit/models/package-test.jshint.js","client/tests/unit/routes/admin/appointments-test.js","client/tests/unit/routes/admin/appointments-test.jshint.js","client/tests/unit/routes/admin/clients-test.js","client/tests/unit/routes/admin/clients-test.jshint.js","client/tests/unit/routes/admin/clients/client-test.js","client/tests/unit/routes/admin/clients/client-test.jshint.js","client/tests/unit/routes/admin/clients/client/edit-test.js","client/tests/unit/routes/admin/clients/client/edit-test.jshint.js","client/tests/unit/routes/admin/clients/new-test.js","client/tests/unit/routes/admin/clients/new-test.jshint.js","client/tests/unit/routes/admin/packages-test.js","client/tests/unit/routes/admin/packages-test.jshint.js","client/tests/unit/routes/admin/packages/new-test.js","client/tests/unit/routes/admin/packages/new-test.jshint.js","client/tests/unit/routes/admin/packages/package-test.js","client/tests/unit/routes/admin/packages/package-test.jshint.js","client/tests/unit/routes/admin/packages/package/edit-test.js","client/tests/unit/routes/admin/packages/package/edit-test.jshint.js","client/tests/unit/routes/appointments-test.js","client/tests/unit/routes/appointments-test.jshint.js","client/tests/unit/routes/clients-test.js","client/tests/unit/routes/clients-test.jshint.js","client/tests/unit/routes/clients/client-test.js","client/tests/unit/routes/clients/client-test.jshint.js","client/tests/unit/routes/clients/client/edit-test.js","client/tests/unit/routes/clients/client/edit-test.jshint.js","client/tests/unit/routes/clients/edit-test.js","client/tests/unit/routes/clients/edit-test.jshint.js","client/tests/unit/routes/clients/new-test.js","client/tests/unit/routes/clients/new-test.jshint.js","client/tests/unit/routes/packages-test.js","client/tests/unit/routes/packages-test.jshint.js","client/tests/unit/routes/packages/new-test.js","client/tests/unit/routes/packages/new-test.jshint.js","client/tests/unit/routes/packages/package-test.js","client/tests/unit/routes/packages/package-test.jshint.js","client/tests/unit/routes/packages/package/edit-test.js","client/tests/unit/routes/packages/package/edit-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('client/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 24, col 73, \\'Ember\\' is not defined.\\nadapters/application.js: line 27, col 73, \\'Ember\\' is not defined.\\nadapters/application.js: line 30, col 73, \\'Ember\\' is not defined.\\n\\n3 errors');\n  });\n});","define('client/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('client/tests/components/package-component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/package-component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/package-component.js should pass jshint.');\n  });\n});","define('client/tests/controllers/admin/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/admin/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/admin/index.js should pass jshint.');\n  });\n});","define('client/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass jshint.\\ncontrollers/application.js: line 8, col 81, Expected \\'===\\' and instead saw \\'==\\'.\\n\\n1 error');\n  });\n});","define('client/tests/controllers/packages.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/packages.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/packages.js should pass jshint.');\n  });\n});","define('client/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('client/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('client/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  ;\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  ;\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n\n  ;\n});","define('client/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'client/tests/helpers/start-app', 'client/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _clientTestsHelpersStartApp, _clientTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _clientTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _clientTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('client/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('client/tests/helpers/resolver', ['exports', 'client/resolver', 'client/config/environment'], function (exports, _clientResolver, _clientConfigEnvironment) {\n\n  var resolver = _clientResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _clientConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _clientConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('client/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('client/tests/helpers/start-app', ['exports', 'ember', 'client/app', 'client/config/environment'], function (exports, _ember, _clientApp, _clientConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _clientConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _clientApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('client/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('client/tests/integration/components/package-component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('package-component', 'Integration | Component | package component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'package-component', ['loc', [null, [1, 0], [1, 21]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.6.2',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.6.2',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'package-component', [], [], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('client/tests/integration/components/package-component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/package-component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/package-component-test.js should pass jshint.');\n  });\n});","define('client/tests/models/appointment.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/appointment.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/appointment.js should pass jshint.');\n  });\n});","define('client/tests/models/client.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/client.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/client.js should pass jshint.');\n  });\n});","define('client/tests/models/package.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/package.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/package.js should pass jshint.');\n  });\n});","define('client/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('client/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin/appointments.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/appointments.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/appointments.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin/clients.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/clients.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/clients.js should pass jshint.\\nroutes/admin/clients.js: line 10, col 25, Missing semicolon.\\nroutes/admin/clients.js: line 8, col 16, \\'transition\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('client/tests/routes/admin/clients/client/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/clients/client/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/clients/client/edit.js should pass jshint.\\nroutes/admin/clients/client/edit.js: line 6, col 79, Missing semicolon.\\n\\n1 error');\n  });\n});","define('client/tests/routes/admin/clients/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/clients/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/clients/index.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin/clients/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/clients/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/clients/new.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/index.js should pass jshint.\\nroutes/admin/index.js: line 4, col 8, \\'inject\\' is defined but never used.\\n\\n1 error');\n  });\n});","define('client/tests/routes/admin/packages/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/packages/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/admin/packages/edit.js should pass jshint.\\nroutes/admin/packages/edit.js: line 11, col 103, Missing semicolon.\\n\\n1 error');\n  });\n});","define('client/tests/routes/admin/packages/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/packages/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/packages/index.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin/packages/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/packages/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/packages/new.js should pass jshint.');\n  });\n});","define('client/tests/routes/admin/packages/package/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/admin/packages/package/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin/packages/package/index.js should pass jshint.');\n  });\n});","define('client/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('client/tests/routes/appointments.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/appointments.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/appointments.js should pass jshint.');\n  });\n});","define('client/tests/routes/clients.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/clients.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/clients.js should pass jshint.\\nroutes/clients.js: line 15, col 25, Missing semicolon.\\nroutes/clients.js: line 13, col 16, \\'transition\\' is defined but never used.\\n\\n2 errors');\n  });\n});","define('client/tests/routes/clients/client/client.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/clients/client/client.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/clients/client/client.js should pass jshint.');\n  });\n});","define('client/tests/routes/clients/client/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/clients/client/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/clients/client/edit.js should pass jshint.');\n  });\n});","define('client/tests/routes/clients/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/clients/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/clients/new.js should pass jshint.');\n  });\n});","define('client/tests/routes/login.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/login.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass jshint.');\n  });\n});","define('client/tests/routes/packages.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/packages.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/packages.js should pass jshint.');\n  });\n});","define('client/tests/routes/packages/edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/packages/edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/packages/edit.js should pass jshint.');\n  });\n});","define('client/tests/routes/packages/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/packages/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/packages/new.js should pass jshint.');\n  });\n});","define('client/tests/routes/packages/package/package.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/packages/package/package.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/packages/package/package.js should pass jshint.');\n  });\n});","define('client/tests/routes/protected.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/protected.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/protected.js should pass jshint.');\n  });\n});","define('client/tests/test-helper', ['exports', 'client/tests/helpers/resolver', 'ember-qunit'], function (exports, _clientTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_clientTestsHelpersResolver['default']);\n});","define('client/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('client/tests/unit/controllers/packages-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:packages', 'Unit | Controller | packages', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('client/tests/unit/controllers/packages-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/controllers/packages-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/packages-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/appointment-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('appointment', 'Unit | Model | appointment', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/appointment-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/appointment-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/appointment-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('client', 'Unit | Model | client', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/client-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/models/package-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('package', 'Unit | Model | package', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('client/tests/unit/models/package-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/package-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/package-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/appointments-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/appointments', 'Unit | Route | admin/appointments', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/appointments-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/appointments-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/appointments-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/clients-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/clients', 'Unit | Route | admin/clients', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/clients-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/clients-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/clients-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/clients/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/clients/client', 'Unit | Route | admin/clients/client', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/clients/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/clients/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/clients/client-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/clients/client/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/clients/client/edit', 'Unit | Route | admin/clients/client/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/clients/client/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/clients/client/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/clients/client/edit-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/clients/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/clients/new', 'Unit | Route | admin/clients/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/clients/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/clients/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/clients/new-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/packages-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/packages', 'Unit | Route | admin/packages', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/packages-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/packages-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/packages-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/packages/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/packages/new', 'Unit | Route | admin/packages/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/packages/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/packages/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/packages/new-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/packages/package-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/packages/package', 'Unit | Route | admin/packages/package', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/packages/package-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/packages/package-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/packages/package-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/admin/packages/package/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:admin/packages/package/edit', 'Unit | Route | admin/packages/package/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/admin/packages/package/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/admin/packages/package/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin/packages/package/edit-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/appointments-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:appointments', 'Unit | Route | appointments', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/appointments-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/appointments-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/appointments-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/clients-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:clients', 'Unit | Route | clients', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/clients-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/clients-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/clients-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/clients/client-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:clients/client', 'Unit | Route | clients/client', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/clients/client-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/clients/client-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/clients/client-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/clients/client/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:clients/client/edit', 'Unit | Route | clients/client/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/clients/client/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/clients/client/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/clients/client/edit-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/clients/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:clients/edit', 'Unit | Route | clients/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/clients/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/clients/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/clients/edit-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/clients/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:clients/new', 'Unit | Route | clients/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/clients/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/clients/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/clients/new-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/packages-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:packages', 'Unit | Route | packages', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/packages-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/packages-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/packages-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/packages/new-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:packages/new', 'Unit | Route | packages/new', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/packages/new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/packages/new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/packages/new-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/packages/package-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:packages/package', 'Unit | Route | packages/package', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/packages/package-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/packages/package-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/packages/package-test.js should pass jshint.');\n  });\n});","define('client/tests/unit/routes/packages/package/edit-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:packages/package/edit', 'Unit | Route | packages/package/edit', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('client/tests/unit/routes/packages/package/edit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/routes/packages/package/edit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/packages/package/edit-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('client/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"tests.js"}